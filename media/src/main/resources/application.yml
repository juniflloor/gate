spring:
  application:
    name: dream-media
  profiles:
    include: mysql
  servlet:
    multipart:
      enabled: true
      max-request-size: 3072MB
      max-file-size: 3072MB
      file-size-threshold: 20MB
  kafka:
    bootstrap-servers: 47.93.35.64:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

log4j:
  logger:
    kafka:
      consumer:
        ZookeeperConsumerConnector=OFF:

logging:
  config:
    classpath: logback.xml

server:
  port: 10920

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: false
    serviceUrl:
      defaultZone: http://localhost:9090/eureka

ribbon:
  eureka:
    enabled: true


zuul:
  SendErrorFilter:
    post:
      disable: true


video:
  sourcePath:   /usr/video/hls/
  targetPath:   /usr/video/hls/video/
  imageDefaultPath:   /usr/video/hls/image/
  imageDefaultUrl:  http://47.93.35.64/defaultImage/
  imageUIPath:  /usr/video/ui/
  imageUIUrl: http://47.93.35.64/uiImage/
  accessUrl:  http://47.93.35.64/video/
  pushUrl: rtmp://localhost/live/live
  pullUrl: http://47.93.35.64/live_hls/live.m3u8

task:
  pool:
    corePoolSize: 20
    maxPoolSize: 40
    keepAliveSeconds: 300
    queueCapacity: 1000